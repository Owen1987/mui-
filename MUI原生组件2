mask（遮罩蒙版） offcanvas（侧滑菜单）popover（弹出菜单）picker（选择器）progressbar（进度条）
transparentBar（透明状态栏）radio（单选框）scroll（区域滑动）
15.遮罩蒙版mask  快捷键mmask
  遮罩蒙版常用的操作包括：创建、显示、关闭
    var mask = mui.createMask(callback);//callback为用户点击蒙版时自动执行的回调；
    mask.show();//显示遮罩
    mask.close();//关闭遮罩
    自定义遮罩效果
    .mui-backdrop {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 998;
    background-color: rgba(0,0,0,.3);
}

16.侧滑菜单offcanvas  快捷键moffcanvas

   mui提供了两种侧滑导航实现：webview模式和div模式，两种模式各有优劣，适用于不同的场景。
   
  webview模式：主页面和菜单内容在不同的webview中，两个页面根据内容需求分别组织DOM结构，mui对其DOM结构无特殊要求
    优点：
      菜单内容是单独的webview，故可被多个页面复用；
      菜单内容在单独的webview中，菜单区域的滚动不影响主界面，故可使用原生滚动，滚动更为流畅；
    缺点：
      不支持拖动手势（跟手拖动）；
      主页面、菜单不同webview实现，因此若需交互（如：点击菜单触发主页面内容变化），需使用自定义事件实现跨webview通讯；
      
    div模式：主页面和菜单内容在同一个webview下，嵌套在特定结构的div中，通过div的移动动画模拟菜单移动；
       优点：
        支持拖动手势（跟手拖动）；
        主页面、菜单在一个页面中，可通过JS轻松实现两者交互（如：点击菜单触发主页面内容变化），没有跨webview通讯的烦恼；
        div模式支持不同的动画效果，
        缺点：
        不支持菜单内容在多页面的复用，需每个页面都生成对应的菜单节点；
        主界面和菜单内容的滚动互不影响，因此会使用div区域滚动，在低端Android手机且滚动内容较多时，可能会稍显卡顿；
       
       
       div模式支持不同的动画效果： 
        动画1：主界面移动、菜单不动
        动画3：主界面不动、菜单移动
        该种动画要求的DOM结构和动画1的DOM结构基本相同，唯一差别就是需在侧滑导航根容器class上增加一个mui-slide-in类
        动画2：缩放式侧滑（类手机QQ）
该种动画要求的DOM结构和动画1的DOM结构基本相同，唯一差别就是需在侧滑导航根容器class上增加一个mui-scalable类
            <!-- 侧滑导航根容器 -->
            <div class="mui-off-canvas-wrap mui-draggable">
             <!-- 2.<div class="mui-off-canvas-wrap mui-draggable mui-slide-in "> 主界面不动、菜单移动 -->
              <!-- 3.<div class="mui-off-canvas-wrap mui-draggable mui-scalable "> 缩放式侧滑（类手机QQ） -->
              <!-- 菜单容器 -->
              <aside class="mui-off-canvas-left">
                <div class="mui-scroll-wrapper">
                  <div class="mui-scroll">
                    <!-- 菜单具体展示内容 -->
                    ...
                  </div>
                </div>
              </aside>
              <!-- 主页面容器 -->
              <div class="mui-inner-wrap">
                <!-- 主页面标题 -->
                <header class="mui-bar mui-bar-nav">
                  <a class="mui-icon mui-action-menu mui-icon-bars mui-pull-left"></a>
                  <h1 class="mui-title">标题</h1>
                </header>
                <div class="mui-content mui-scroll-wrapper">
                  <div class="mui-scroll">
                    <!-- 主界面具体展示内容 -->
                    ...
                  </div>
                </div>  
              </div>
</div>
动画4：主界面、菜单同时移动
该种动画要求的DOM结构较特殊，需将菜单容器放在主页面容器之下

      <!-- 侧滑导航根容器 -->
      <div class="mui-off-canvas-wrap mui-draggable">
        <!-- 主页面容器 -->
        <div class="mui-inner-wrap">
           <!-- 菜单容器 -->
          <aside class="mui-off-canvas-left">
            <div class="mui-scroll-wrapper">
              <div class="mui-scroll">
                <!-- 菜单具体展示内容 -->
                ...
              </div>
            </div>
          </aside>
          <!-- 主页面标题 -->
          <header class="mui-bar mui-bar-nav">
            <a class="mui-icon mui-action-menu mui-icon-bars mui-pull-left"></a>
            <h1 class="mui-title">标题</h1>
          </header>
          <!-- 主页面内容容器 -->
          <div class="mui-content mui-scroll-wrapper">
            <div class="mui-scroll">
              <!-- 主界面具体展示内容 -->
              ...
            </div>
          </div>  
        </div>
      </div>
      
      JS API
          mui支持多种方式操作div模式的侧滑菜单：
          1、在界面上拖动操作（drag）；
          2、点击含有mui-action-menu类的控件；
          3、Android手机按menu键；
          4、通过JS API触发，
          如下：
          可以有两种调用方式（show() close() toggle()都支持这两种）
          mui('.mui-off-canvas-wrap').offCanvas('show');
          或
          mui('.mui-off-canvas-wrap').offCanvas().show();
          
      事件监听： shown hidden
          document.querySelector('.mui-off-canvas-wrap').addEventListener('shown',function (event) {
               //...
           })
           通过isShown()方法判断是否为显示状态：
           mui('.mui-off-canvas-wrap').offCanvas().isShown();
           isShown() 方法也可以传递 direction(方向) 参数( 非必选!! )进而可以判断左右侧滑：
           mui('.mui-off-canvas-wrap').offCanvas().isShown('left');//true
  17.   弹出菜单--popover   快捷键mpopover
       弹出菜单显示内容不限，但必须包裹在一个含.mui-popover类的div中
       <div id="popover" class="mui-popover">
          <ul class="mui-table-view">
            <li class="mui-table-view-cell"><a href="#">Item1</a></li>
            <li class="mui-table-view-cell"><a href="#">Item2</a></li>
            <li class="mui-table-view-cell"><a href="#">Item3</a></li>
            <li class="mui-table-view-cell"><a href="#">Item4</a></li>
            <li class="mui-table-view-cell"><a href="#">Item5</a></li>
          </ul>
        </div>
    要显示、隐藏如上菜单    
   <a href="#popover" id="openPopover" class="mui-btn mui-btn-primary mui-btn-block">打开弹出菜单</a>
 也可通过js弹出菜单
  mui('.bottomPopover').popover(status[,anchor]);//'show' 'hide'   'toggle'(自动识别处理显示隐藏状态)
  mui('.bottomPopover').popover('toggle');
  //传入toggle参数，用户也无需关心当前是显示还是隐藏状态，mui会自动识别处理；
     mui('.mui-popover').popover('toggle',document.getElementById("openPopover"));
 18.   透明状态栏--transparentBar  快捷键mtransparentBar
 当用户向下滚动时，标题栏逐渐由透明转变为不透明；当用户再次向上滚动时，标题栏又从不透明变为透明状态。 mui-bar-transparent
       <header class="mui-bar mui-bar-nav mui-bar-transparent">
        <h1 class="mui-title">标题</h1>
      </header>
      使用DOM API data-
      data-top距离顶部高度(滚动到该位置即触发) data-offset滚动透明距离 data-duration过渡时间  ms   data-scrollby监听区域滚动容器  (*mui 3.5版本+支持) 默认window默认监听原生滚动,
      <header class="mui-bar mui-bar-nav mui-bar-transparent" data-top='0' data-offset='150' data-duration='16' data-scrollby=".mui-scroll-wrapper">
        <h1 class="mui-title">标题</h1>
      </header>
      使用js API
      mui('.mui-bar-transparent').transparent({
            top: 0,
            offset: 150,
            duration: 16,
            scrollby: document.querySelector('.mui-scroll-wrapper')
        })
 19.进度条progressbar    快捷键mprogressbar
 
 有准确值的进度条-----------------
       有准确值的进度条会显示当前进度正处于整体进度的占比位置，用户可以更直观的预期完成时间；
       <div id="demo1" class="mui-progressbar">
          <span></span>
       </div>

       初始化：mui(container).progressbar({progress:20}).show();
      初始化逻辑若本容器没有mui-progressbar类，会自动往它的子节点找带有mui-progressbar的，若子节点也没，则会自动创建
       mui("#demo1").progressbar({progress:20}).show();
       更新：mui(container).progressbar().setProgress(50);
       关闭：mui(container).progressbar().hide();---关闭进度条一般用于动态创建（DOM中预先未定义）的进度条，调用hide方法后，会直接删掉对应的DOM节点；若已提前创建好DOM节点的进度条，调用hide方法无效；
    无限循环进度条:----------多一个类 mui-progressbar-infinite
     <div id="demo1" class="mui-progressbar mui-progressbar-infinite">
        <span></span>
      </div>
      初始化
     mui("#demo1").progressbar().show();
     关闭
     mui("#demo1").progressbar().hide();
     
     
     页面顶部进度条
       页面顶部进度条类似浏览器进度条，固定显示在页面顶部（标题导航控件下方）； 因此，若当前页面使用父子双webview模式，子页面没有标题导航组件，则需通过自定义css的方式，重定义顶部进度条的位置
             body>.mui-progressbar{
                        top:0
              }
    使用页面顶部进度条时，无需编写DOM结构，使用如下代码即可自动创建（顶部无限循环进度条同理）：

            mui('body').progressbar({
              progress: 20
            }).show();    
            
  20 区域滚动 scroll  
  21.单选框  radio
  22.选择器  picker
  
